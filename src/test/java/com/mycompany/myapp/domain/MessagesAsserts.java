package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MessagesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesAllPropertiesEquals(Messages expected, Messages actual) {
        assertMessagesAutoGeneratedPropertiesEquals(expected, actual);
        assertMessagesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesAllUpdatablePropertiesEquals(Messages expected, Messages actual) {
        assertMessagesUpdatableFieldsEquals(expected, actual);
        assertMessagesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesAutoGeneratedPropertiesEquals(Messages expected, Messages actual) {
        assertThat(expected)
            .as("Verify Messages auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesUpdatableFieldsEquals(Messages expected, Messages actual) {
        assertThat(expected)
            .as("Verify Messages relevant properties")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getSentAt()).as("check sentAt").isEqualTo(actual.getSentAt()))
            .satisfies(e -> assertThat(e.getEditedAt()).as("check editedAt").isEqualTo(actual.getEditedAt()))
            .satisfies(e -> assertThat(e.getIsDeleted()).as("check isDeleted").isEqualTo(actual.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesUpdatableRelationshipsEquals(Messages expected, Messages actual) {
        assertThat(expected)
            .as("Verify Messages relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()))
            .satisfies(e -> assertThat(e.getChannels()).as("check channels").isEqualTo(actual.getChannels()));
    }
}
